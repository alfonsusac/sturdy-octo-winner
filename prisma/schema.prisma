// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PROD_DB_URL_POOLED")
  directUrl = env("PROD_DB_URL")
}

enum AcccountProvider {
  google
  credentials
}

model Account {
  id                String           @id @default(uuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  providerType      AcccountProvider
  providerAccountId String

  @@unique([providerAccountId, providerType], name: "providerData")
}

model User {
  id                String          @id @default(uuid())
  email             String          @unique
  accounts          Account[]
  username          String
  displayName       String
  profilePicture    String
  friendsOf         User[]          @relation("userFriends")
  friends           User[]          @relation("userFriends")
  friendRequest     FriendRequest[] @relation("friendRequests")
  friendRequestSent FriendRequest[] @relation("sentFriendRequests")
  guildMember       GuildMember[]
  createdAt         DateTime        @default(now())
  bio               String          @default("")
  ownedGuild        Guild[]
}

model UserDefaultImage {
  email String @id @unique
  id    String @default(uuid())
}

model FriendRequest {
  id         String              @id @default(uuid())
  fromUser   User                @relation(fields: [fromUserID], references: [id], name: "friendRequests")
  fromUserID String
  toUser     User                @relation(fields: [toUserID], references: [id], name: "sentFriendRequests")
  toUserID   String
  status     FriendRequestStatus @default(PENDING)
}

enum FriendRequestStatus {
  PENDING
  IGNORED
}

model DirectMessageRoom {
  id       String    @id
  messages Message[]
}

model Guild {
  id             String        @id @default(uuid())
  name           String
  profilePicture Boolean
  members        GuildMember[]
  owner          User          @relation(fields: [ownerUserId], references: [id])
  ownerUserId    String
  channels       Channel[]
}

model GuildMember {
  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@id([guildId, userId])
}

model Channel {
  id       String    @id @default(uuid())
  name     String
  guild    Guild     @relation(fields: [guildId], references: [id])
  guildId  String
  messages Message[]
}

model Message {
  id                  String             @id @default(uuid())
  sender              String
  content             String
  created_at          DateTime           @default(now())
  origin              String
  channel             Channel?           @relation(fields: [channelId], references: [id])
  channelId           String?
  directMessageRoom   DirectMessageRoom? @relation(fields: [directMessageRoomId], references: [id])
  directMessageRoomId String?
}
